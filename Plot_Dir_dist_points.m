##################################################################################################################
##				Author:		Dematties Dario Jesus						##
##				Contact:	dariodematties@hotmail.com.ar					##
##						dariodematties@yahoo.com.ar					##
##						dario.dematties@frm.utn.edu.ar					##
##				Project:	Engineering PhD Project						##
##				Institution:	Universidad de Buenos Aires					##
##						Facultad de Ingeniería (FIUBA)					##
##				Workplace:	Instituto de Ingeniería						##
##						Biomédica FIUBA	&						##
##						CCT CONICET Mendoza INCIHUSA					##
##################################################################################################################

# File Name:		Plot_Dir_dist_points.m
# Language:		GNU Octave high-level interpreted language.


# This function plots the points generated by a Dirichlet distribution in its simplex
# The Dirichlet distribution can be generated by means of three methods:
# Pólya's urn, stick-breaking and Gamma distribution.

# Inputs:
#	alpha:		Parameter of the Dirichlet distribution Dir(alpha). This parameter is a column vector of k components.
#	method		The method by means of which the distribution is generated
#	points		The number of points to be drawn from the Dirichlet distribution
#	iterations	This is an optinal parameter only used for Polya's urn method.
#			It is the number of iterations to be used in order to generate the distribution

# Outputs:
#	no return value.

function Plot_Dir_dist_points(alpha,method,points,iterations)

# checks the function arguments
if (nargin != 3 && nargin != 4)
	str = ["Plot_Dir_dist_points (alpha,method,points,iterations)\n"];
	str = [str "# Inputs:\n"];
	str = [str "#	alpha:		Parameter of the Dirichlet distribution Dir(alpha). This parameter is a column vector of k components.\n"];
	str = [str "#	method		The method by means of which the distribution is generated\n"];
	str = [str "method can be polya, stick or gamm\n"];
	str = [str "#	points		The number of points to be drawn from the Dirichlet distribution\n"];
	str = [str "#	iterations	This is an optinal parameter only used for Polya's urn method (method = polya).\n"];
	str = [str "#			It is the number of iterations to be used in order to generate the distribution\n"];
	usage(str);
endif

[k, a]=size(alpha);				# Extracts the number of components from the parameter vector alpha and put it in k.

# alpha has to be a column vector
if (a!=1)
	error("alpha must be a column vector with a dimensionality (k,1)")
endif

# alpha has to be a column vector of at most k=3
if (k>3)
	error("alpha has to be a column vector of at most k=3")
endif

# every element of alpha has to be >0
if (any(alpha<=0))
	error("alpha components must be >0")
endif

# method argument has to be a string
if (!ischar(method))
	error("method must be of class string")
endif

# points has to be a scalar natural value
if (!isscalar(points) || mod(points,1) != 0 || points <= 0)
	error("points must be a scalar natural value")
endif

# itertion has to be a scalar natural value
if (nargin == 4 && (!isscalar(iterations) || mod(iterations,1) != 0 || iterations <= 0)) 
	error("iterations must be a scalar natural value")
endif


if (strcmp(method,"polya"))		# if polya method is chosen
	if (nargin != 4)
		error("when you choose 'polya' method you have to provide 'iterations' as the fourth argument")
	endif	

	for i=1:points
		Q(:,:,i)=Polya_urn_Dir_dist_function(alpha,iterations);
	endfor
elseif (strcmp(method,"stick"))		# if stick method is chosen
	if (nargin != 3)
		error("when you choose 'stick' method you have to provide three arguments")
	endif	

	for i=1:points
		Q(:,i)=Stick_breaking_Dir_dist_function(alpha);
	endfor
elseif (strcmp(method, "gamm"))		# if gamm method is chosen
	if (nargin != 3)
		error("when you choose 'gamm' method you have to provide three arguments")
	endif	

	for i=1:points
		Q(:,i)=Gamma_Dir_dist_function(alpha);
	endfor
else
	error("incorrect method: you can choose polya, stick or gamm as allowed methods")
endif

# reshape the output in order to be ploted
for i=1:points
	for j=1:k
		if (strcmp(method,"polya"))
			A(j,i)=Q(j,1,i);
		else
			A(j,i)=Q(j,i);
		endif
	endfor
endfor

figure

if (k==3)	# 3D plots
	plot3(A(1,:), A(2,:), A(3,:), '*');
	hold on
	v = patch([1,0,0],[0,1,0],[0,0,1], 'g');
	set(v,'facealpha',0.5);
	hold off
	axis([0 1 0 1 0 1], "square");
elseif (k==2)	# 2D plots
	plot(A(1,:), A(2,:), '*');
	axis([0 1 0 1], "square");
endif

endfunction
