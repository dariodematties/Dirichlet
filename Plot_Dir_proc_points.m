##################################################################################################################
##				Author:		Dematties Dario Jesus						##
##				Contact:	dariodematties@hotmail.com.ar					##
##						dariodematties@yahoo.com.ar					##
##						dario.dematties@frm.utn.edu.ar					##
##				Project:	Engineering PhD Project						##
##				Institution:	Universidad de Buenos Aires					##
##						Facultad de Ingeniería (FIUBA)					##
##				Workplace:	Instituto de Ingeniería						##
##						Biomédica FIUBA	&						##
##						CCT CONICET Mendoza INCIHUSA					##
##################################################################################################################

# File Name:		Plot_Dir_proc_points.m
# Language:		GNU Octave high-level interpreted language.


# This function plots the points generated by a Dirichlet distribution in its simplex
# The Dirichlet distribution can be generated by means of three methods:
# Pólya's urn, stick-breaking and Gamma distribution.

# Inputs:
#	alpha:		Dispersion parameter of the Dirichlet process. This parameter is a scalar.
#	method		The method by means of which the process is carried out
#	points		The number of points to be drawn
#	color_dist	This is a function handle. This must be a color distribution to sample new colors.
#			This is used for the Polya's urn

# Outputs:
#	no return value.

function Plot_Dir_proc_points(alpha,method,points,color_dist)

# checks the function arguments
if (nargin != 3 && nargin != 4)
	str = ["Plot_Dir_proc_points (alpha,method,points,color_dist)\n"];
	str = [str "# Inputs:\n"];
	str = [str "#	alpha:		Dispersion parameter of the Dirichlet process. This parameter is a scalar.\n"];
	str = [str "#	method		The method by means of which the process is carried out\n"];
	str = [str "method can be chinese, polya or stick\n"];
	str = [str "#	points		The number of points to be drawn\n"];
	str = [str "#	color_dist	This is a function handle. This must be a color distribution to sample new colors.\n"];
	str = [str "#			This is used for the Polya's urn\n"];
	usage(str);
endif

# alpha must be a scalar greater than 0
if (!isscalar(alpha) || alpha<=0)
	error("alpha must be a scalar and it must be >0")
endif

# method argument has to be a string
if (!ischar(method))
	error("method must be of class string")
endif

# points has to be a scalar natural value
if (!isscalar(points) || mod(points,1) != 0 || points <= 0)
	error("points must be a scalar natural value")
endif

# color_dist must be a function handle
if (nargin == 4 && (!is_function_handle(color_dist)))
	error("color_dist must be a function handle")
endif

if (strcmp(method,"polya"))		# if polya method is chosen
	if (nargin != 4)
		error("when you choose 'polya' method you have to provide 'color_dist' as the fourth argument")
	endif	

	subplot(2,2,1);
	urn = Polya_urn_Dir_proc_function(color_dist,points,alpha);
	hist(urn,100);
	xlabel("color of balls")
	ylabel("number of balls in every color")
	subplot(2,2,2);
	plot(1:points,urn,"*");
	xlabel("ball number","fontsize", 12)
	ylabel("color of the balls","fontsize", 12)
	balls_per_color=[];
	for i=1:length(urn)
		balls_per_color=[balls_per_color i/length(unique(urn(1,1:i)))];
	endfor
	subplot(2,2,3);
	plot(1:points,balls_per_color,"*");
	xlabel("ball number","fontsize", 12)
	ylabel("balls per color","fontsize", 12)

	balls_per_color=[];
	color_hist=hist(urn,unique(urn));
	for i=1:length(color_hist)
		balls_per_color=[balls_per_color sum(color_hist(1,1:i))/i];
	endfor
	subplot(2,2,4);
	plot(1:length(color_hist),balls_per_color,"*");
	xlabel("number of colors","fontsize", 12)
	ylabel("balls per color","fontsize", 12)
	str = ["Polya's urn Dirichlet process, number of balls: " num2str(points) ", alpha: " num2str(alpha) "."];
	suptitle(str)

elseif (strcmp(method,"stick"))		# if stick method is chosen
	if (nargin != 3)
		error("when you choose 'stick' method you have to provide three arguments")
	endif	

	weights = Stick_breaking_process(points, alpha);
	bar(weights)
	xlabel("number of bar","fontsize", 12);
	ylabel("bar weghts","fontsize", 12);
	str = ["Stick breaking process. Number of weights is: " num2str(points) ", alpha is: " num2str(alpha) "."];
	title(str);

elseif (strcmp(method, "chinese"))	# if chinese method is chosen
	if (nargin != 3)
		error("when you choose 'chinese' method you have to provide three arguments")
	endif	

	subplot(2,2,1);
	rest = Chinese_restaurant_process(points,alpha);
	hist(rest,100);
	xlabel("table of customers","fontsize", 12)
	ylabel("number of customers in every table","fontsize", 12)
	subplot(2,2,2);
	plot(1:points,rest,"*");
	xlabel("customer number","fontsize", 12)
	ylabel("table of the customers","fontsize", 12)
	customers_per_table=[];
	for i=1:length(rest)
		customers_per_table=[customers_per_table i/length(unique(rest(1,1:i)))];
	endfor
	subplot(2,2,3);
	plot(1:points,customers_per_table,"*");
	xlabel("customer number","fontsize", 12)
	ylabel("customers per table","fontsize", 12)

	customers_per_table=[];
	table_hist=hist(rest,unique(rest));
	for i=1:length(table_hist)
		customers_per_table=[customers_per_table sum(table_hist(1,1:i))/i];
	endfor
	subplot(2,2,4);
	plot(1:length(table_hist),customers_per_table,"*");
	xlabel("number of tables","fontsize", 12)
	ylabel("customers per table","fontsize", 12)
	str = ["Chinese restaurant process, number of customers: " num2str(points) ", alpha: " num2str(alpha) "."];
	suptitle(str)

else
	error("incorrect method: you can choose polya, stick or chinese as allowed methods")
endif


endfunction
